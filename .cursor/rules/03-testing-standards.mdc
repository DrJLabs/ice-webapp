---
description: 
globs: tests/**/*.ts,**/*.test.tsx,**/*.test.ts
alwaysApply: false
---
---
description: "Testing standards and workflows for Vitest and Playwright. Applies to all test files."
globs: "tests/**/*.ts,**/*.test.tsx,**/*.test.ts"
AlwaysApply: false
---
# ðŸ§ª Testing Standards and Workflow

When working on test files, adhere to the following standards.

## 1. Testing Strategy

-   **Unit Tests**: Use **Vitest** and **React Testing Library** for testing individual components and functions.
-   **Integration Tests**: Test user workflows by composing multiple components and services.
-   **End-to-End (E2E) Tests**: Use **Playwright** for testing critical user journeys across the entire application.
-   **Accessibility Tests**: Use **`jest-axe`** to ensure components are accessible.

## 2. Unit Testing Best Practices

-   Tests should be co-located with the component or function they are testing (e.g., `Button.tsx` and `Button.test.tsx`).
-   Focus on testing the component's behavior from a user's perspective. Avoid testing implementation details.
-   Use `userEvent` from React Testing Library to simulate real user interactions.
-   Mock dependencies like API calls or external services using `vi.mock`.

## 3. Testing Quality Gate

Before committing, ensure all tests pass:

```bash
# Run all unit and integration tests
pnpm run test

# If adding a major feature, run E2E tests as well
pnpm run test:e2e
```

## 4. Test Coverage Requirements

-   **New Features**: Must have a minimum of 80% test coverage.
-   **Critical Code**: Critical business logic and utilities should have 100% test coverage.
-   **Bug Fixes**: A bug fix must include a regression test that fails before the fix and passes after.