---
description: 
globs: 
alwaysApply: true
---
---
description: "Enforces ICE-WEBAPP development workflow and quality gates - must be followed on every Cursor AI session without exception"
when: always
globs: []
---

# ðŸ§Š MANDATORY ICE-WEBAPP WORKFLOW

## âš¡ CURSOR AI MUST FOLLOW THIS WORKFLOW ON EVERY RUN

### ðŸ“‹ Required Steps for Every Cursor Session:

1. **Read AGENTS.md First**: Always start by reviewing `AGENTS.md` for current development guidelines
   ```bash
   # Understand current project patterns and requirements
   cat AGENTS.md
   ```

2. **Create Feature Branch**: Create a new branch with `ice/` prefix for all changes
   ```bash
   git checkout -b ice/[descriptive-feature-name]
   ```

3. **Follow Quality Gates**: Implement all required quality checks during development
   ```bash
   # TypeScript validation
   pnpm run type-check
   
   # Linting validation  
   pnpm run lint
   
   # Test execution
   pnpm run test
   
   # Security scanning
   ./tools/codacy-runtime.sh
   ```

4. **Implement with ICE Patterns**: Use established ICE-WEBAPP patterns and utilities
   - Use `cn()` utility from `@/lib/utils` for conditional classes
   - Follow TypeScript strict mode requirements
   - Implement proper error handling and loading states
   - Use Zod schemas for data validation

5. **Commit with Quality**: Add changes and commit with descriptive messages
   ```bash
   git add .
   git commit -m "feat: [descriptive commit message following conventional commits]"
   ```

6. **Push and Track**: Push branch with upstream tracking
   ```bash
   git push -u origin ice/[branch-name]
   ```

### ðŸŽ¯ Branch Naming Convention for ICE-WEBAPP:
- **Format**: `ice/[feature-description]`
- **Examples**:
  - `ice/bootstrap-system-implementation`
  - `ice/codex-integration-optimization`
  - `ice/ai-prompt-template-enhancement`
  - `ice/quality-gate-automation`

### âœ… Quality Gate Requirements:
- âœ… TypeScript compilation passes (`pnpm run type-check`)
- âœ… Zero linting errors (`pnpm run lint`)
- âœ… All tests pass (`pnpm run test`)
- âœ… Security scan clean (`./tools/codacy-runtime.sh`)
- âœ… Bundle size within limits (`pnpm run analyze`)

### ðŸš¨ CRITICAL REQUIREMENTS:
- Never work directly on main branch
- Always follow AGENTS.md guidelines
- Run quality gates before committing
- Use existing patterns and utilities
- Follow bleeding-edge best practices

### ðŸ“Š Performance Standards:
- **Component Creation**: <15 minutes with full testing
- **API Development**: <30 minutes with security validation
- **Page Implementation**: <40 minutes with SEO optimization
- **Quality Assurance**: <5 minutes automated validation

This is rule #000 and has the highest priority - must be followed without exception for all ICE-WEBAPP development.
