name: Build, Test, and Deploy

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20.19.1'
  PNPM_VERSION: '10'

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: [self-hosted, linux, quality, analysis]
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run ESLint
        run: pnpm run lint
        
      - name: Run TypeScript type check
        run: pnpm run type-check

  security-scan:
    name: Security Scan
    runs-on: [self-hosted, linux, security, scan]
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true
        
      - name: Install Trivy
        run: |
          if ! command -v trivy &> /dev/null; then
            wget -qO- https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /tmp/trivy
            export PATH="/tmp/trivy:$PATH"
          fi
        
      - name: Run Trivy filesystem scan
        run: |
          export PATH="/tmp/trivy:$PATH"
          trivy fs --format table --severity HIGH,CRITICAL . || echo "Trivy scan completed with issues"

  build:
    name: Build Next.js Application
    runs-on: [self-hosted, linux, build, large]
    needs: [lint-and-typecheck, security-scan]
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build application
        run: pnpm run build
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .next/
            public/
          retention-days: 1
          compression-level: 6

  unit-tests:
    name: Unit Tests
    runs-on: [self-hosted, linux, test, unit]
    needs: [lint-and-typecheck]
    timeout-minutes: 10
    env:
      CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
      CODACY_ACCOUNT_TOKEN: ${{ secrets.CODACY_ACCOUNT_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run unit tests with coverage
        run: pnpm run test:coverage
        
      - name: Upload coverage to Codacy
        if: success() && env.CODACY_PROJECT_TOKEN
        run: |
          curl -Ls https://coverage.codacy.com/get.sh | bash -s -- report -r ./coverage/lcov.info
        continue-on-error: true

  e2e-tests:
    name: E2E Tests
    runs-on: [self-hosted, linux, integration, api]
    needs: [build]
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps
        
      - name: Run E2E tests
        run: pnpm run test:e2e
        env:
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:3000
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  parallel-tests:
    name: Parallel Test Suite
    runs-on: [self-hosted, linux, test, parallel, fast]
    needs: [lint-and-typecheck]
    timeout-minutes: 8
    strategy:
      matrix:
        test-group: [1, 2, 3]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run parallel test group ${{ matrix.test-group }}
        run: |
          # Split tests into groups for parallel execution
          case ${{ matrix.test-group }} in
            1) pnpm run test --run --reporter=verbose src/components/ ;;
            2) pnpm run test --run --reporter=verbose src/lib/ ;;
            3) pnpm run test --run --reporter=verbose tests/ ;;
          esac

  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop'
    runs-on: [self-hosted, linux, deploy, production]
    needs: [unit-tests, e2e-tests, parallel-tests]
    timeout-minutes: 10
    environment:
      name: staging
      url: https://staging.ice-webapp.drjlabs.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prod
        
      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          echo "Environment: staging"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add your actual deployment commands here
          # npm run deploy:staging

  deploy-production:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main'
    runs-on: [self-hosted, linux, deploy, production]
    needs: [unit-tests, e2e-tests, parallel-tests]
    timeout-minutes: 15
    environment:
      name: production
      url: https://ice-webapp.drjlabs.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prod
        
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production environment..."
          echo "Environment: production"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add your actual deployment commands here
          # npm run deploy:production 