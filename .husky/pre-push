#!/bin/sh
# husky v10 format - no longer using the husky.sh approach

# Check if this is a special push that should bypass hooks
if [ "$SKIP_HOOKS" = "1" ] || [ "$SKIP_PRE_PUSH" = "1" ]; then
  echo "üßä Skipping ICE-WEBAPP pre-push quality gates (SKIP_HOOKS=1 or SKIP_PRE_PUSH=1)"
  exit 0
fi

echo "üßä Running ICE-WEBAPP pre-push quality gates..."

# 1. Run tests with coverage
echo "Running tests with coverage..."
pnpm run test:coverage || { 
  echo "‚ùå Tests failed! Fix tests before pushing or use git push --no-verify to bypass."
  echo "   Or set environment variable: SKIP_PRE_PUSH=1 git push"
  exit 1
}

# 2. Check coverage thresholds
# Extract coverage percentages from the output
echo "Checking coverage thresholds..."

# Required thresholds
LINES_THRESHOLD=70
STATEMENTS_THRESHOLD=70
FUNCTIONS_THRESHOLD=65
BRANCHES_THRESHOLD=60

FAILED=0

# Parse coverage values from vitest output
LINES_COVERAGE=$(grep -A6 "% Coverage report" -a "$(find . -name "*.log" -o -name "stdout" | tail -1)" | grep -A4 "All files" | awk 'NR==2 {gsub(/[^0-9.]/, "", $2); print $2}')
STATEMENTS_COVERAGE=$(grep -A6 "% Coverage report" -a "$(find . -name "*.log" -o -name "stdout" | tail -1)" | grep -A4 "All files" | awk 'NR==2 {gsub(/[^0-9.]/, "", $1); print $1}')
FUNCTIONS_COVERAGE=$(grep -A6 "% Coverage report" -a "$(find . -name "*.log" -o -name "stdout" | tail -1)" | grep -A4 "All files" | awk 'NR==2 {gsub(/[^0-9.]/, "", $3); print $3}')
BRANCHES_COVERAGE=$(grep -A6 "% Coverage report" -a "$(find . -name "*.log" -o -name "stdout" | tail -1)" | grep -A4 "All files" | awk 'NR==2 {gsub(/[^0-9.]/, "", $4); print $4}')

# Function to compare coverage values
check_threshold() {
  coverage="$1"
  threshold="$2"
  name="$3"

  if [ -z "$coverage" ]; then
    echo "‚ö†Ô∏è Could not determine $name coverage."
    return 0
  fi

  # Use awk for floating point comparison
  if awk "BEGIN {exit !($coverage < $threshold)}"; then
    echo "‚ùå $name coverage ($coverage%) is below threshold ($threshold%)"
    FAILED=1
  else
    echo "‚úÖ $name coverage: $coverage% (threshold: $threshold%)"
  fi
}

# Check all coverage metrics
check_threshold "$LINES_COVERAGE" "$LINES_THRESHOLD" "Lines"
check_threshold "$STATEMENTS_COVERAGE" "$STATEMENTS_THRESHOLD" "Statements"
check_threshold "$FUNCTIONS_COVERAGE" "$FUNCTIONS_THRESHOLD" "Functions"
check_threshold "$BRANCHES_COVERAGE" "$BRANCHES_THRESHOLD" "Branches"

# 3. Upload coverage to Codacy
echo "Uploading coverage to Codacy..."
if [ -f "coverage/lcov.info" ]; then
  pnpm run coverage:upload || echo "‚ö†Ô∏è Coverage upload failed, but continuing..."
else
  echo "‚ö†Ô∏è No coverage report found. Skipping upload."
fi

if [ "$FAILED" -eq 1 ]; then
  echo "‚ùå Coverage check failed! Please add more tests to improve coverage."
  echo "   To bypass: use git push --no-verify"
  echo "   Or set environment variable: SKIP_PRE_PUSH=1 git push"
  exit 1
fi

echo "‚úÖ All coverage thresholds passed!"
