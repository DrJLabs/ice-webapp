#!/bin/sh
# husky v10 format - no longer using the husky.sh approach

# Check if this is a special push that should bypass hooks
if [ "$SKIP_HOOKS" = "1" ] || [ "$SKIP_PRE_PUSH" = "1" ]; then
  echo "üßä Skipping ICE-WEBAPP pre-push quality gates (SKIP_HOOKS=1 or SKIP_PRE_PUSH=1)"
  exit 0
fi

echo "üßä Running ICE-WEBAPP pre-push quality gates..."

# 1. Run tests with coverage
echo "Running tests with coverage..."
pnpm run test:coverage || { 
  echo "‚ùå Tests failed! Fix tests before pushing or use git push --no-verify to bypass."
  echo "   Or set environment variable: SKIP_PRE_PUSH=1 git push"
  exit 1
}

# 2. Check coverage thresholds
# Extract coverage percentages from the output
echo "Checking coverage thresholds..."

# Required thresholds
LINES_THRESHOLD=70
STATEMENTS_THRESHOLD=70
FUNCTIONS_THRESHOLD=65
BRANCHES_THRESHOLD=60

FAILED=0

# Use grep directly on the coverage output from Vitest, which prints a table like:
# ----------|---------|----------|---------|---------|-------------------
# File      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
# ----------|---------|----------|---------|---------|-------------------
# All files |    88.6 |    95.45 |   91.66 |    88.6 |                   
# utils.ts  |    88.6 |    95.45 |   91.66 |    88.6 | 28-33,127-129     
# ----------|---------|----------|---------|---------|-------------------

# Get the "All files" line from the coverage report
COVERAGE_LINE=$(grep "All files" coverage/coverage-summary.json 2>/dev/null || 
                grep -A1 "% Coverage report" -a "$(find . -name "stdout" -o -name "*.log" | tail -1)" 2>/dev/null | 
                grep "All files" | head -1)

if [ -n "$COVERAGE_LINE" ]; then
  # Extract coverage percentages
  STATEMENTS_COVERAGE=$(echo "$COVERAGE_LINE" | awk '{print $2}' | tr -d '|,%')
  BRANCHES_COVERAGE=$(echo "$COVERAGE_LINE" | awk '{print $3}' | tr -d '|,%')
  FUNCTIONS_COVERAGE=$(echo "$COVERAGE_LINE" | awk '{print $4}' | tr -d '|,%')
  LINES_COVERAGE=$(echo "$COVERAGE_LINE" | awk '{print $5}' | tr -d '|,%')
  
  # Function to compare coverage values
  check_threshold() {
    coverage="$1"
    threshold="$2"
    name="$3"

    if [ -z "$coverage" ]; then
      echo "‚ö†Ô∏è Could not determine $name coverage."
      return 0
    fi

    # Use simple numeric comparison
    if [ "$(echo "$coverage < $threshold" | bc -l)" = "1" ]; then
      echo "‚ùå $name coverage ($coverage%) is below threshold ($threshold%)"
      FAILED=1
    else
      echo "‚úÖ $name coverage: $coverage% (threshold: $threshold%)"
    fi
  }

  # Check all coverage metrics
  check_threshold "$LINES_COVERAGE" "$LINES_THRESHOLD" "Lines"
  check_threshold "$STATEMENTS_COVERAGE" "$STATEMENTS_THRESHOLD" "Statements"
  check_threshold "$FUNCTIONS_COVERAGE" "$FUNCTIONS_THRESHOLD" "Functions"
  check_threshold "$BRANCHES_COVERAGE" "$BRANCHES_THRESHOLD" "Branches"
else
  echo "‚ö†Ô∏è Could not find coverage data. Proceeding anyway."
fi

# 3. Upload coverage to Codacy
echo "Uploading coverage to Codacy..."
if [ -f "coverage/lcov.info" ]; then
  pnpm run coverage:upload || echo "‚ö†Ô∏è Coverage upload failed, but continuing..."
else
  echo "‚ö†Ô∏è No coverage report found. Skipping upload."
fi

if [ "$FAILED" -eq 1 ]; then
  echo "‚ùå Coverage check failed! Please add more tests to improve coverage."
  echo "   To bypass: use git push --no-verify"
  echo "   Or set environment variable: SKIP_PRE_PUSH=1 git push"
  exit 1
fi

echo "‚úÖ All coverage thresholds passed!"
