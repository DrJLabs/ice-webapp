#!/usr/bin/env sh
# Husky pre-push hook
# To bypass this hook: git push --no-verify

# Check if this is a special push that should bypass hooks
if [ "$SKIP_HOOKS" = "1" ] || [ "$SKIP_PRE_PUSH" = "1" ]; then
  echo "üßä Skipping ICE-WEBAPP pre-push quality gates (SKIP_HOOKS=1 or SKIP_PRE_PUSH=1)"
  exit 0
fi

echo "üßä Running ICE-WEBAPP pre-push quality gates..."

# 1. Run tests with coverage
echo "Running tests with coverage..."
pnpm run test:coverage || { 
  echo "‚ùå Tests failed! Fix tests before pushing or use git push --no-verify to bypass."
  echo "   Or set environment variable: SKIP_PRE_PUSH=1 git push"
  exit 1
}

# 2. Check coverage thresholds
# Extract coverage percentages from the output
echo "Checking coverage thresholds..."

# Check if coverage summary exists
if [ ! -f "coverage/coverage-summary.json" ]; then
  echo "‚ö†Ô∏è No coverage summary found. Make sure tests are generating coverage reports."
  
  # Try to generate summary from lcov if it exists
  if [ -f "coverage/lcov.info" ]; then
    echo "üîÑ Trying to parse coverage from lcov.info instead..."
    # Continue with minimal check
  else
    echo "‚ö†Ô∏è No coverage data found. Skipping coverage checks."
    echo "   To fix: make sure your tests generate coverage reports."
    echo "   To bypass: use git push --no-verify"
    exit 1
  fi
fi

# Required thresholds
LINES_THRESHOLD=70
STATEMENTS_THRESHOLD=70
FUNCTIONS_THRESHOLD=65
BRANCHES_THRESHOLD=60

FAILED=0

# Function to extract and check coverage
check_coverage() {
  if [ -f "coverage/coverage-summary.json" ]; then
    COVERAGE_REPORT=$(cat coverage/coverage-summary.json)
    
    # Extract coverage values
    LINES_COVERAGE=$(echo "$COVERAGE_REPORT" | grep -o '"lines":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9]*\.[0-9]*' | grep -o 'pct":[0-9]*\.[0-9]*' | cut -d':' -f2)
    STATEMENTS_COVERAGE=$(echo "$COVERAGE_REPORT" | grep -o '"statements":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9]*\.[0-9]*' | grep -o 'pct":[0-9]*\.[0-9]*' | cut -d':' -f2)
    FUNCTIONS_COVERAGE=$(echo "$COVERAGE_REPORT" | grep -o '"functions":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9]*\.[0-9]*' | grep -o 'pct":[0-9]*\.[0-9]*' | cut -d':' -f2)
    BRANCHES_COVERAGE=$(echo "$COVERAGE_REPORT" | grep -o '"branches":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9]*\.[0-9]*' | grep -o 'pct":[0-9]*\.[0-9]*' | cut -d':' -f2)

    # Convert to integers for comparison (e.g., 75.5 -> 7550)
    LINES_INT=$(echo "$LINES_COVERAGE * 100" | bc | cut -d'.' -f1)
    STATEMENTS_INT=$(echo "$STATEMENTS_COVERAGE * 100" | bc | cut -d'.' -f1)
    FUNCTIONS_INT=$(echo "$FUNCTIONS_COVERAGE * 100" | bc | cut -d'.' -f1)
    BRANCHES_INT=$(echo "$BRANCHES_COVERAGE * 100" | bc | cut -d'.' -f1)

    LINES_THRESHOLD_INT=$(echo "$LINES_THRESHOLD * 100" | bc)
    STATEMENTS_THRESHOLD_INT=$(echo "$STATEMENTS_THRESHOLD * 100" | bc)
    FUNCTIONS_THRESHOLD_INT=$(echo "$FUNCTIONS_THRESHOLD * 100" | bc)
    BRANCHES_THRESHOLD_INT=$(echo "$BRANCHES_THRESHOLD * 100" | bc)

    # Check if coverage meets thresholds
    if [ "$LINES_INT" -lt "$LINES_THRESHOLD_INT" ]; then
      echo "‚ùå Lines coverage ($LINES_COVERAGE%) is below threshold ($LINES_THRESHOLD%)"
      FAILED=1
    else
      echo "‚úÖ Lines coverage: $LINES_COVERAGE% (threshold: $LINES_THRESHOLD%)"
    fi

    if [ "$STATEMENTS_INT" -lt "$STATEMENTS_THRESHOLD_INT" ]; then
      echo "‚ùå Statements coverage ($STATEMENTS_COVERAGE%) is below threshold ($STATEMENTS_THRESHOLD%)"
      FAILED=1
    else
      echo "‚úÖ Statements coverage: $STATEMENTS_COVERAGE% (threshold: $STATEMENTS_THRESHOLD%)"
    fi

    if [ "$FUNCTIONS_INT" -lt "$FUNCTIONS_THRESHOLD_INT" ]; then
      echo "‚ùå Functions coverage ($FUNCTIONS_COVERAGE%) is below threshold ($FUNCTIONS_THRESHOLD%)"
      FAILED=1
    else
      echo "‚úÖ Functions coverage: $FUNCTIONS_COVERAGE% (threshold: $FUNCTIONS_THRESHOLD%)"
    fi

    if [ "$BRANCHES_INT" -lt "$BRANCHES_THRESHOLD_INT" ]; then
      echo "‚ùå Branches coverage ($BRANCHES_COVERAGE%) is below threshold ($BRANCHES_THRESHOLD%)"
      FAILED=1
    else
      echo "‚úÖ Branches coverage: $BRANCHES_COVERAGE% (threshold: $BRANCHES_THRESHOLD%)"
    fi
  else
    echo "‚ö†Ô∏è Could not check coverage thresholds. Coverage report not found."
    # Don't fail the build here, let it proceed if the tests passed
  fi
}

# Run coverage check
check_coverage

# 3. Upload coverage to Codacy
echo "Uploading coverage to Codacy..."
if [ -f "coverage/lcov.info" ]; then
  pnpm run coverage:upload || echo "‚ö†Ô∏è Coverage upload failed, but continuing..."
else
  echo "‚ö†Ô∏è No coverage report found. Skipping upload."
fi

if [ "$FAILED" -eq 1 ]; then
  echo "‚ùå Coverage check failed! Please add more tests to improve coverage."
  echo "   To bypass: use git push --no-verify"
  echo "   Or set environment variable: SKIP_PRE_PUSH=1 git push"
  exit 1
fi

echo "‚úÖ All coverage thresholds passed!" 